{"version":3,"sources":["components/card.js","components/cardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","robot","card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","search","target","value","state","_this2","fetch","then","res","json","users","_this3","filteredRobots","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","cardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAceA,EAZF,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,KAAKC,EAAcF,EAAdE,MAAMC,EAAQH,EAARG,GACzB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,iBAA6CO,IAAI,WACzDN,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCcMS,EAnBE,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OAClB,OACER,EAAAC,EAAAC,cAAA,WAECM,EAAOC,IAAI,SAACC,GACX,OACEV,EAAAC,EAAAC,cAACS,EAAD,CACCC,IAAKF,EAAMX,GACXF,KAAMa,EAAMb,KACZE,GAAIW,EAAMX,GACVD,MAAOY,EAAMZ,YCANe,EAXG,SAAAjB,GAAoB,IAAlBkB,EAAkBlB,EAAlBkB,aACnB,OACCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SAAOa,KAAK,SACZC,YAAY,gBACZb,UAAU,mCACVc,SAAUH,MCEEI,EARA,SAACC,GACf,OACEnB,EAAAC,EAAAC,cAAA,OAAKkB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WC0CIC,qBAxCd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcDI,aAAe,SAACC,GAAOR,EAAKS,SAAS,CACnCC,OAAQF,EAAEG,OAAOC,SAdlBZ,EAAKa,MAAQ,CACZ/B,OAAQ,GACR4B,OAAQ,IAJGV,mFAQM,IAAAc,EAAAX,KAClBY,MAAM,8CACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAC3B,OAAQqC,uCAQ/B,IAAAC,EAAAjB,KACDkB,EAAiBlB,KAAKU,MAAM/B,OAAOwC,OAAO,SAAAtC,GAC/C,OAAOA,EAAMb,KAAKoD,cAAcC,SAASJ,EAAKP,MAAMH,OAAOa,iBAE5D,OAAgC,IAA7BpB,KAAKU,MAAM/B,OAAO2C,OACbnD,EAAAC,EAAAC,cAAA,wBAGPF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACkD,EAAD,CAAWtC,aAAce,KAAKI,eAC9BjC,EAAAC,EAAAC,cAACmD,EAAD,KACCrD,EAAAC,EAAAC,cAACoD,EAAD,CAAU9C,OAASuC,aAhCNQ,0BCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.46013736.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn (\r\n\t\t\t<div className=\"bg-light-green pa3 tc ma2 dib br3 bw2 shadow-5 grow\">\r\n\t\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h3>{name}</h3>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./card\";\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\trobots.map((robot) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t key={robot.id}\r\n\t\t\t\t\t\t\t name={robot.name}\r\n\t\t\t\t\t\t\t id={robot.id} \r\n\t\t\t\t\t\t\t email={robot.email} \r\n\t\t\t\t\t\t\t />\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default CardList;","import React from \"react\"\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t <input type=\"search\" \r\n\t\t placeholder=\"search robots\" \r\n\t\t className=\"pa3 ba b--green bg-lightest-blue\" \r\n\t\t onChange={searchChange}/>\r\n\t \t</div>\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t\t<div style={{overflow: 'scroll', border: '2px solid black', height: '700px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component }from \"react\"\r\nimport CardList from \"../components/cardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearch: \"\"\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(res => res.json())\r\n\t\t.then(users => this.setState({robots: users}))\r\n\t}\r\n\r\n\r\n\thandleChange = (e) => {this.setState({\r\n\t\t\tsearch: e.target.value\r\n\t\t})\r\n\t}\r\n\trender(){\r\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.search.toLowerCase());\r\n\t\t})\r\n\t\tif(this.state.robots.length === 0 ){\r\n\t\t\treturn <h1>LOADING...</h1>\r\n\t\t} else{\r\n\t\t\treturn (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.handleChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={ filteredRobots } />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t)\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./containers/App\";\nimport 'tachyons';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}